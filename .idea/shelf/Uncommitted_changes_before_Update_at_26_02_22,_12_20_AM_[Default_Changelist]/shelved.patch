Index: app/src/main/java/edu/vit/vtop/navapp/Activity/HomeActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.vit.vtop.navapp.Activity;\n\nimport androidx.activity.result.ActivityResultLauncher;\nimport androidx.activity.result.contract.ActivityResultContracts;\nimport androidx.annotation.RequiresApi;\nimport androidx.core.app.ActivityCompat;\nimport androidx.core.content.ContextCompat;\nimport androidx.fragment.app.FragmentActivity;\n\nimport android.Manifest;\nimport android.annotation.SuppressLint;\nimport android.content.pm.PackageManager;\nimport android.graphics.Bitmap;\nimport android.graphics.Canvas;\nimport android.graphics.drawable.Drawable;\nimport android.location.Location;\nimport android.location.LocationManager;\nimport android.os.Build;\nimport android.os.Bundle;\nimport android.content.Context;\nimport android.os.Handler;\nimport android.view.View;\n\nimport com.google.android.gms.maps.CameraUpdateFactory;\nimport com.google.android.gms.maps.GoogleMap;\nimport com.google.android.gms.maps.OnMapReadyCallback;\nimport com.google.android.gms.maps.SupportMapFragment;\nimport com.google.android.gms.maps.model.BitmapDescriptor;\nimport com.google.android.gms.maps.model.BitmapDescriptorFactory;\nimport com.google.android.gms.maps.model.LatLng;\nimport com.google.android.gms.maps.model.LatLngBounds;\nimport com.google.android.gms.maps.model.MapStyleOptions;\nimport com.google.android.gms.maps.model.MarkerOptions;\nimport com.google.android.material.floatingactionbutton.FloatingActionButton;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport edu.vit.vtop.navapp.R;\nimport edu.vit.vtop.navapp.databinding.ActivityHomeBinding;\n\npublic class HomeActivity extends FragmentActivity implements OnMapReadyCallback {\n\n    private GoogleMap mMap;\n    private ActivityHomeBinding binding;\n\n    @RequiresApi(api = Build.VERSION_CODES.N)\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        ActivityResultLauncher<String[]> locationPermissionRequest =\n                registerForActivityResult(new ActivityResultContracts\n                                .RequestMultiplePermissions(), result -> {\n                            Boolean fineLocationGranted = result.getOrDefault(\n                                    Manifest.permission.ACCESS_FINE_LOCATION, false);\n                            Boolean coarseLocationGranted = result.getOrDefault(\n                                    Manifest.permission.ACCESS_COARSE_LOCATION, false);\n                            if (fineLocationGranted != null && fineLocationGranted) {\n                                // Precise location access granted.\n                            } else if (coarseLocationGranted != null && coarseLocationGranted) {\n                                // Only approximate location access granted.\n                            } else {\n                                // No location access granted.\n                            }\n                        }\n                );\n        binding = ActivityHomeBinding.inflate(getLayoutInflater());\n        setContentView(binding.getRoot());\n\n        // Obtain the SupportMapFragment and get notified when the map is ready to be used.\n        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()\n                .findFragmentById(R.id.map);\n        mapFragment.getMapAsync(this);\n\n        binding.userLocationButton.setOnClickListener(new View.OnClickListener() {\n\n            @Override\n            public void onClick(View view) {\n\n\n                locationPermissionRequest.launch(new String[]{\n                        Manifest.permission.ACCESS_FINE_LOCATION,\n                        Manifest.permission.ACCESS_COARSE_LOCATION\n\n                });\n                LatLng center = mMap.getCameraPosition().target;\n                String sLatitude = String.format(\"%.6f\", center.latitude);\n                String sLongitude = String.format(\"%.6f\", center.longitude);\n                StringBuilder mLatLng = new StringBuilder();\n                mLatLng.append(sLatitude);\n                mLatLng.append(\"°\");\n                mLatLng.append(\" \");\n                mLatLng.append(sLongitude);\n                mLatLng.append(\"°\");\n\n\n                Location location = getLastKnownLocation();\n                if (location != null) {\n\n                    if (ActivityCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\n\n                        return;\n                    }\n                    mMap.setMyLocationEnabled(true);\n                    mMap.getUiSettings().setMyLocationButtonEnabled(true);\n                    mMap.getUiSettings().setAllGesturesEnabled(true);\n                    //delay is for after map loaded animation starts\n                    Handler handler = new Handler();\n                    handler.postDelayed(new Runnable() {\n                        @Override\n                        public void run() {\n                            mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(location.getLatitude(), location.getLongitude()), 15));\n\n                        }\n                    }, 2000);\n                }\n            }\n        });\n    }\n    private Location getLastKnownLocation() {\n        LocationManager locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);\n        List<String> providers = locationManager.getProviders(true);\n        Location bestLocation = null;\n        for (String provider : providers) {\n            @SuppressLint(\"MissingPermission\") Location l = locationManager.getLastKnownLocation(provider);\n            if (l == null) {\n                continue;\n            }\n            if (bestLocation == null || l.getAccuracy() < bestLocation.getAccuracy()) {\n                // Found best last known location: %s\", l);\n                bestLocation = l;\n            }\n        }\n        return bestLocation;\n    }\n\n    @Override\n    public void onMapReady(GoogleMap googleMap) {\n        mMap = googleMap;\n        mMap.setMapStyle(MapStyleOptions.loadRawResourceStyle(getApplicationContext(), R.raw.map_style));\n\n        // Create a LatLngBounds that includes the VIT Campus bounds\n        LatLngBounds vitBounds = new LatLngBounds(\n                new LatLng(12.967077, 79.152291), // SW bounds\n                new LatLng(12.978755, 79.167387)  // NE bounds\n        );\n\n\n// Constrain the camera target to the VIT Campus bounds.\n        mMap.setLatLngBoundsForCameraTarget(vitBounds);\n        mMap.setMinZoomPreference(16.0f); // Set a preference for minimum zoom (Zoom out).\n//        mMap.setMaxZoomPreference(14.0f); // Set a preference for maximum zoom (Zoom In).\n\n//        ArrayList<LatLng> latLngList = new ArrayList<>();\n//        latLngList.add(new LatLng(-27.457, 153.040));\n//        latLngList.add(new LatLng(-33.852, 151.211));\n//        latLngList.add(new LatLng(-37.813, 144.962));\n//        latLngList.add(new LatLng(-34.928, 138.599));\n//        googleMap.addPolygon(PolygonOptions()\n//                .clickable(false)\n//                .addAll(latLngList)\n//                .fillColor(getColor(R.color.polygonColor))\n//                .strokeWidth(0f))\n\n        // Add a marker in VIT and move the camera\n        LatLng vit = new LatLng(12.974714, 79.164227);\n        mMap.addMarker(new MarkerOptions().position(vit).title(\"VIT\")\n                .icon(BitmapFromVector(getApplicationContext(), R.drawable.ic_marker)));\n        mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(vit, 15f));\n    }\n\n\n    private BitmapDescriptor BitmapFromVector(Context context, int vectorResId) {\n        // below line is use to generate a drawable.\n        Drawable vectorDrawable = ContextCompat.getDrawable(context, vectorResId);\n\n        // below line is use to set bounds to our vector drawable.\n        vectorDrawable.setBounds(0, 0, vectorDrawable.getIntrinsicWidth(), vectorDrawable.getIntrinsicHeight());\n\n        // below line is use to create a bitmap for our\n        // drawable which we have added.\n        Bitmap bitmap = Bitmap.createBitmap(vectorDrawable.getIntrinsicWidth(), vectorDrawable.getIntrinsicHeight(), Bitmap.Config.ARGB_8888);\n\n        // below line is use to add bitmap in our canvas.\n        Canvas canvas = new Canvas(bitmap);\n\n        // below line is use to draw our\n        // vector drawable in canvas.\n        vectorDrawable.draw(canvas);\n\n        // after generating our bitmap we are returning our bitmap.\n        return BitmapDescriptorFactory.fromBitmap(bitmap);\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/edu/vit/vtop/navapp/Activity/HomeActivity.java b/app/src/main/java/edu/vit/vtop/navapp/Activity/HomeActivity.java
--- a/app/src/main/java/edu/vit/vtop/navapp/Activity/HomeActivity.java	(revision 8f394c96a2a32eedb6eb0bbf97282c40351fec30)
+++ b/app/src/main/java/edu/vit/vtop/navapp/Activity/HomeActivity.java	(date 1645814850839)
@@ -165,7 +165,7 @@
         // Add a marker in VIT and move the camera
         LatLng vit = new LatLng(12.974714, 79.164227);
         mMap.addMarker(new MarkerOptions().position(vit).title("VIT")
-                .icon(BitmapFromVector(getApplicationContext(), R.drawable.ic_marker)));
+                .icon(BitmapFromVector(getApplicationContext(), R.drawable.ic_marker_halt)));
         mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(vit, 15f));
     }
 
